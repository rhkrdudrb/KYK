/* SPRING MVC PROJECT 
    ITEM : MULTIPLEX RESERVATION SYTEM
    NEEDS______
    1. 상영관 개수의 동적 처리
    2. 각 상영관 좌석 수의 동적처리
    3. 좌석의 동적 배치
    4. WEB을 이용한 예약처리
    5. WEB을 이용한 영화관 관리
    6. 연령별 요금의 동적처리
*/
/* MULTIPLEX TABLESPACE CREATION :: SYS */
-- CREATION
CREATE TABLESPACE MULTIPLEX
DATAFILE 'D:\Spring\database\TS\MULTIPLEX_01.ORA'
SIZE 10M AUTOEXTEND ON NEXT 5M MAXSIZE 100M;

-- TABLESPACE CHECK VIEW :: SYS
  CREATE OR REPLACE VIEW TSINFO
  AS
  SELECT TS.TABLESPACE_NAME AS "TABLESPACE",
         TS.STATUS AS "TS_STATUS",
         TS.CONTENTS AS "TYPE",
         DF.FILE_NAME AS "FILE_NAME",
         DF.BYTES /(1024*1024) || 'M' AS "SIZE",
         DF.STATUS AS "DF_STATUS",
         FS.BYTES /(1024*1024) || 'M' AS "AVAILABLE"         
  FROM DBA_TABLESPACES TS INNER JOIN DBA_DATA_FILES DF ON TS.TABLESPACE_NAME = DF.TABLESPACE_NAME
                          INNER JOIN DBA_FREE_SPACE FS ON TS.TABLESPACE_NAME = FS.TABLESPACE_NAME;
  -->> GRANT
  GRANT ALL ON SYS.TSINFO TO ADM;
  CREATE PUBLIC SYNONYM TSINFO FOR SYS.TSINFO;
  
/* TEAM DBA CREATION : SYS */
-- CREATION
CREATE USER ADM IDENTIFIED BY "5678"
DEFAULT TABLESPACE MULTIPLEX
TEMPORARY TABLESPACE TEMP
QUOTA UNLIMITED ON MULTIPLEX;

-- PRIVILEAGE
GRANT DBA TO ADM;

-- USER CHECK VIEW :: SYS
CREATE OR REPLACE VIEW USERINFO
AS
SELECT USERNAME AS "USERNAME", 
       ACCOUNT_STATUS AS "STATUS",  
       DEFAULT_TABLESPACE AS "TABLESPACE",
       GRANTED_ROLE AS "ROLE"
FROM DBA_USERS DU INNER JOIN DBA_ROLE_PRIVS RP ON DU.USERNAME = RP.GRANTEE;
   
  -->> GRANT :: SYS
  GRANT ALL ON SYS.USERINFO TO ADM;
  CREATE PUBLIC SYNONYM USERINFO FOR SYS.USERINFO;
       
-- USER CHECK :: DBA
SELECT * FROM USERINFO WHERE USERNAME='ADM';
-- TABLESPACE CHECK :: DBA
SELECT * FROM TSINFO WHERE TABLESPACE = 'MULTIPLEX';

/* TEAM DEV CREATION : TEAM DBA */
-- CREATION
CREATE USER DEVELOPER IDENTIFIED BY "5678"
DEFAULT TABLESPACE MULTIPLEX
TEMPORARY TABLESPACE TEMP
QUOTA UNLIMITED ON MULTIPLEX;
-- GRANT
GRANT CONNECT, RESOURCE TO DEVELOPER;


/*  TABLE DESIGN 
    PART 1. KEY ENTITY
            -1. CUSTOMER(ST) 
                : ST_ID(PK)[NV], ST_NAME[NV], ST_PASSWORD[NV], ST_PHONE[NC11]
            -2. THEATER(TH)
                : TH_CODE(PK)[NC1], TH_NAME[NV], TH_ADDR[NV]
            -3. MOVIE(MV)
                : MV_CODE(PK)[NC8], MV_NAME[NV], MV_GRADE[NC1], MV_STATUS[NC1], MV_IMAGE[NV], MV_COMMENTS[NV NULL]
                
    PART2. MAIN ENTITY
            2-1. SCREEN(SC)
                : SC_THCODE(FK, PK)[NC1], SC_NUMBER(PK)[NC2], SC_SEATS[N3], SC_COLS[N2], SC_ROWS[N2]
            2-1-1. INACTIVE SEAT(IS)
                : IS_SCTHCODE(+FK, PK)[NC1], SC_NUMBER(+FK, PK)[NC2], IS_SEAT(PK)[N3], IS_TYPE[NC1]
            3-1. SCREENING MOVIE(SI)
                : SI_MVCODE(FK, PK)[NC8], SI_SCTHCODE(+FK, PK)[NC1], SI_SCNUMBER(+FK, PK)[NC2], 
                  SI_DATETIME(PK)[DATE]
             -3. RESERVATION(RV)
                : RV_CODE(PK)[NC14], RV_SIMVCODE(+FK)[NC8], RV_SISCTHCODE(+FK)[NC1], RV_SISCNUMBER(+FK)[NC2], 
                  (YYYYMMDDNNNNNN)
                  RV_SIDATETIME(+FK)[DATE]
                  
        
    PART3. ACTION ENTITY
             -1. RESERVATION DETAIL(RD)
                : RD_RVCODE(FK, PK)[NC14], RD_SEAT(PK)[N3], RD_TYPE[NC1]
*/
CREATE TABLE CUSTOMER (
 ST_ID      NVARCHAR2(10),
 ST_NAME    NVARCHAR2(6),
 ST_PASSWORD      NVARCHAR2(500),
 ST_PHONE  NCHAR(11)
 );
CREATE PUBLIC SYNONYM ST FOR CUSTOMER;
SELECT * FROM ST;
ALTER TABLE CUSTOMER ADD CONSTRAINT ST_ID_PK PRIMARY KEY(ST_ID);
ALTER TABLE CUSTOMER MODIFY ST_PASSWORD NVARCHAR2(500);

--------------------------------------------------------------------------------
CREATE TABLE THEATER (
 TH_CODE     NCHAR(1),
 TH_NAME    NVARCHAR2(10),
 TH_ADDR      NVARCHAR2(100)
 );
 CREATE PUBLIC SYNONYM TH FOR THEATER;
SELECT * FROM TH;
ALTER TABLE THEATER ADD CONSTRAINT TH_CODE_PK PRIMARY KEY(TH_CODE);
--------------------------------------------------------------------------------
CREATE TABLE MOVIE (
 MV_CODE     NCHAR(8),
 MV_NAME    NVARCHAR2(20),
 MV_GRADE      NCHAR(1),
 MV_STATUS     NCHAR(1), 
 MV_IMAGE   NVARCHAR2(100),
 MV_COMMENTS NVARCHAR2(1000)
 );
 CREATE PUBLIC SYNONYM MV FOR MOVIE;
SELECT * FROM MV;
ALTER TABLE MOVIE ADD CONSTRAINT MV_CODE_PK PRIMARY KEY(MV_CODE);
--------------------------------------------------------------------------------
CREATE TABLE "SCREEN" (
 SC_THCODE     NCHAR(1),
 SC_NUMBER    NCHAR(2),
 SC_SEATS      NUMBER(3,0),
 SC_COLS     NUMBER(2,0), 
 SC_ROWS   NUMBER(2,0)
 );
 CREATE PUBLIC SYNONYM SC FOR "SCREEN";
SELECT * FROM SC;
ALTER TABLE "SCREEN" ADD CONSTRAINT SC_THCODE_NUMBER_PK PRIMARY KEY(SC_THCODE,SC_NUMBER);

ALTER TABLE "SCREEN"
 ADD CONSTRAINT SC_THCODE_FK FOREIGN KEY(SC_THCODE)
 REFERENCES THEATER(TH_CODE);
--------------------------------------------------------------------------------
CREATE TABLE INACTIVE_SEAT (
 IS_SCTHCODE     NCHAR(1),
 IS_SCNUMBER    NCHAR(2),
 IS_SEAT      NUMBER(3,0),
 IS_TYPE     NCHAR(1)
 );
 CREATE PUBLIC SYNONYM "IS" FOR INACTIVE_SEAT;
SELECT * FROM "IS";
ALTER TABLE INACTIVE_SEAT ADD CONSTRAINT IS_SCTHCODE_SCNUMBER_SEAT_PK PRIMARY KEY(IS_SCTHCODE,IS_SCNUMBER,IS_SEAT);

ALTER TABLE INACTIVE_SEAT
 ADD CONSTRAINT IS_SCTHCODE_NUMBER_FK FOREIGN KEY(IS_SCTHCODE,IS_SCNUMBER)
 REFERENCES "SCREEN"(SC_THCODE,SC_NUMBER);
--------------------------------------------------------------------------------
CREATE TABLE SCREENING_MOVIE (
 SI_MVCODE     NCHAR(8),
 SI_SCTHCODE    NCHAR(1),
 SI_SCNUMBER      NCHAR(2),
 SI_DATETIME     DATE
 );    
CREATE PUBLIC SYNONYM SI FOR SCREENING_MOVIE;
SELECT * FROM SI;

ALTER TABLE SCREENING_MOVIE ADD CONSTRAINT SI_MVCO_SCTHCO_SCNUM_TIME_PK 
PRIMARY KEY(SI_MVCODE,SI_SCTHCODE,SI_SCNUMBER,SI_DATETIME);

ALTER TABLE SCREENING_MOVIE
 ADD CONSTRAINT SI_SCTHCO_SCNUM_FK FOREIGN KEY(SI_SCTHCODE,SI_SCNUMBER)
 REFERENCES "SCREEN"(SC_THCODE,SC_NUMBER);
 
 ALTER TABLE SCREENING_MOVIE
 ADD CONSTRAINT SI_MVCO_FK FOREIGN KEY(SI_MVCODE)
 REFERENCES MOVIE(MV_CODE);
--------------------------------------------------------------------------------
CREATE TABLE RESERVATION (
 RV_CODE     NCHAR(14),
 RV_SIMVCODE    NCHAR(8),
 RV_SISCTHCODE      NCHAR(1),
 RV_SISCNUMBER     NCHAR(2),
 RV_SIDATETIME   DATE
 );            
CREATE PUBLIC SYNONYM RV FOR RESERVATION;
SELECT * FROM RV;

ALTER TABLE RESERVATION ADD CONSTRAINT RV_CODE_PK 
PRIMARY KEY(RV_CODE);            

ALTER TABLE RESERVATION
 ADD CONSTRAINT RV_SI_ALL_FK FOREIGN KEY(RV_SIMVCODE,RV_SISCTHCODE,RV_SISCNUMBER,RV_SIDATETIME)
 REFERENCES SCREENING_MOVIE(SI_MVCODE,SI_SCTHCODE,SI_SCNUMBER,SI_DATETIME);
--------------------------------------------------------------------------------
 CREATE TABLE RESERVATION_DETAIL (
 RD_RVCODE    NCHAR(14),
 RD_SEAT    NUMBER(3,0),
 RD_TYPE      NCHAR(1)
 );   
 
 CREATE PUBLIC SYNONYM RD FOR RESERVATION_DETAIL;
SELECT * FROM RD;

ALTER TABLE RESERVATION_DETAIL ADD CONSTRAINT RD_RVCODE_SEAT_PK 
PRIMARY KEY(RD_RVCODE,RD_SEAT);            

ALTER TABLE RESERVATION_DETAIL
 ADD CONSTRAINT RD_RVCODE_FK FOREIGN KEY(RD_RVCODE)
 REFERENCES RESERVATION(RV_CODE);
 
GRANT SELECT, UPDATE, INSERT ON RD TO KYK,YUN,PSW,DOKGEO; 
 시퀀스 확인요망 인설트 남음 